#!/bin/bash

STATE_REGION=eu-west-1
USER_PREFIX="admin"

if [ "$(uname)" == "Darwin" ]; then
  ACCOUNTS_DIR=$(cd "$(dirname "$0")/../accounts" && pwd)
else
  ACCOUNTS_DIR=$(readlink -f "$(dirname "$(readlink -f "$0")")/../accounts")
fi

prep () {
  ACCOUNT_DIR="$ACCOUNTS_DIR/$ACCOUNT"
  
  if [ ! -d "$ACCOUNT_DIR" ]; then
    echo "No such account $ACCOUNT"
    exit 1
  fi
  
  TF_DIR="$ACCOUNT_DIR/.terraform"
  
  TF_VERSION=$(cd $ACCOUNT_DIR && terraform --version | perl -lne'print $1 if /^Terraform v(\d+\.\d+\.\d+)/')

  STATE_BUCKET=$(aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- aws --region $STATE_REGION s3 ls | awk {'print $3'}  | grep nubis-deploy | head)

  if [ -z "$STATE_BUCKET" ]; then
    STATE_BUCKET="nubis-deploy-$(openssl rand -hex 16)"
    
    echo "Creating remote state bucket $STATE_BUCKET"

    aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- \
      aws --region $STATE_REGION s3 mb "s3://${STATE_BUCKET}"
    aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- \
      aws --region $STATE_REGION s3api put-bucket-versioning --bucket ${STATE_BUCKET} --versioning-configuration Status=Enabled
  else
    # Check for versionning
    BUCKET_VERSIONNING=$(aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- aws --region $STATE_REGION s3api get-bucket-versioning --bucket ${STATE_BUCKET} | jq -r .Status)
    if [ "Enabled" != "$BUCKET_VERSIONNING" ]; then
      echo "Enabling Versionning on state bucket"
      aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- \
        aws --region $STATE_REGION s3api put-bucket-versioning --bucket ${STATE_BUCKET} --versioning-configuration Status=Enabled
    fi
  fi
  
  TF_BACKEND_BUCKET=$(cat "$ACCOUNT_DIR/.terraform/terraform.tfstate" 2>/dev/null | jq -r .backend.config.bucket 2>/dev/null )

  if [ ! -d "$TF_DIR/modules" ] || [ ! -d "$TF_DIR/plugins" ] || [ "$TF_BACKEND_BUCKET" == "null" ] || [ "$TF_BACKEND_BUCKET" == "" ]; then
    echo "Initializing Terraform"

    cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform init \
      -input=true \
      -upgrade=false \
      -backend-config="region=$STATE_REGION" \
      -backend-config="key=terraform/nubis-deploy" \
      -backend-config="bucket=$STATE_BUCKET" \
      deploy
    
    if [ "$?" != "0" ]; then
      echo "TF Init failed"
      exit $?
    fi
  fi

}

update () {
  echo "Running update for $ACCOUNT in $ACCOUNT_DIR"
  
  git submodule update --remote --recursive "$ACCOUNT_DIR/deploy"
  
  cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform init -backend=false -input=false -upgrade=true deploy
}

plan () {
  echo "Running plan for $ACCOUNT in $ACCOUNT_DIR"
  
  cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform plan -input=false -var-file=../../globals/terraform.tfvars -var-file=terraform.tfvars deploy
}

apply () {
  echo "Running apply for $ACCOUNT in $ACCOUNT_DIR"
  
  cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform apply -input=false -var-file=../../globals/terraform.tfvars -var-file=terraform.tfvars deploy
}

status () {
  echo "Running outputs for $ACCOUNT in $ACCOUNT_DIR"
  
  cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform output | sed -e's/^/  /g'
}

cleanup () {
  hash amicleaner 2>/dev/null || message_print CRITICAL "Please install amicleaner to use this build tool. https://github.com/bonclay7/aws-amicleaner"
  hash cleanup-packer-aws-resources 2>/dev/null || message_print CRITICAL "Please install cleanup-packer-aws-resources to use this build tool. https://github.com/AndrewFarley/farley-aws-missing-tools/tree/master/cleanup-packer-aws-resources"

  echo "Running cleanup for $ACCOUNT in $ACCOUNT_DIR"

  echo "Cleaning Packer Artifacts"
  aws-vault exec --assume-role-ttl=60m "${ACCOUNT}-$USER_PREFIX" -- cleanup-packer-aws-resources

  #XXX: Here if we used instead --keep-previous 10 --mapping-values "project platform" we would only keep the last 10 builds
  echo "Cleaning Duplicate AMIs"
  for region in $(aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- aws --region us-west-2 ec2 describe-regions | jq -r .Regions[].RegionName | sort); do
    echo "Cleaning in $region"
    AWS_DEFAULT_REGION=$region aws-vault exec --assume-role-ttl=60m "${ACCOUNT}-$USER_PREFIX" -- amicleaner -f --mapping-key tags --keep-previous 1 --mapping-values "project platform version"
  done
}

admins () {
  echo "Showing admins for $ACCOUNT in $ACCOUNT_DIR"
  
  cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform output | grep admins_ | perl -MJSON -MData::Dumper -ne'/(\S*)\s+=\s+(\S*)/; $i=0 ; foreach my $foo (split(",",$2)) { $info[$i++]{$1} = $foo }; END { print to_json(\@info)}' | jq .

}

taint_admins () {
  echo "Tainting admins for $ACCOUNT in $ACCOUNT_DIR"
  
  for admin in $(cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform  show | grep module.global_admins.aws_iam_access_key | cut -d: -f1 | cut -d. -f3- ); do
    cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform taint -module=global_admins $admin
  done
}

taint_lambda () {
  echo "Tainting lambda for $ACCOUNT in $ACCOUNT_DIR"

  for lambda in $(cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform  show | grep -E '\.(aws_lambda_function|aws_lambda_permission)\.' | cut -d: -f1 | cut -d. -f2- ); do
    module=$(echo "$lambda" | perl -pe's/^(.*)\.(aws_lambda_(function|permission)\..*)/$1/')
    resource=$(echo "$lambda" | perl -pe's/^(.*)\.(aws_lambda_(function|permission)\..*)/$2/')
    cd $ACCOUNT_DIR && aws-vault exec "${ACCOUNT}-$USER_PREFIX" -- terraform taint -module=$module $resource
  done

}

accounts () {
  ACCOUNTS=$(cd $ACCOUNTS_DIR && ls -1)
  echo "$ACCOUNTS"
}

help () {
 echo "Usage: $0 [plan|apply|init|admins|taint-admin-access-keys|status|update|cleanup|help] account-name"
}

hash aws 2>/dev/null || message_print CRITICAL "Please install the AWS CLI API to use this build tool. https://aws.amazon.com/cli/"
hash terraform 2>/dev/null || message_print CRITICAL "Please install packer to use this build tool. https://terraform.io/"

case "$1" in
   accounts)
        accounts
   ;;
   plan)
	ACCOUNT=$2
	shift 2
	prep
	plan
	;;
   apply)
	ACCOUNT=$2
	shift 2
	prep
	apply
	;;
   init)
	ACCOUNT=$2
	shift 2
	prep
	;;
   admins)
        ACCOUNT=$2
	shift 2
	prep
	admins
	;;
   taint-admin-access-keys)
        ACCOUNT=$2
	shift 2
	prep
	taint_admins
	;;
   taint-lambda)
        ACCOUNT=$2
	shift 2
	prep
	taint_lambda
	;;
   status)
	ACCOUNT=$2
	shift 2
	prep
	status
	;;
   cleanup)
	ACCOUNT=$2
	shift 2
	prep
	cleanup
	;;
   update)
	ACCOUNT=$2
	shift 2
	prep
	update
	;;
    *)
        help
        ;;
esac

